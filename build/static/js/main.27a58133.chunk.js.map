{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6PAceA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCE3BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKJ,UAAU,SAASI,ICUlBC,EAfA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,gBCZAC,EAAU,8BA0BD,EAvBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJd,QAAS,mCACTe,KAAM,2BACNjB,WAAW,GAEb,OAAOY,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAexC,EAXA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCiE5BK,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAOhBC,qBAAU,WAERC,IAAqBlB,MAAK,SAAAmB,GAAY,OAAIT,EAASS,QAClD,IAGH,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aA+B1DwC,EAAqB,SAAAxB,GACzB,IAAMnB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDoC,EACUpB,EAAI2B,GACXzB,MAAK,SAAA0B,GACJhB,EAASD,EAAMkB,KAAI,SAAAhD,GAAI,OAAKA,EAAKmB,KAAOA,EAAKnB,EAAO+C,SAGrDE,OAAM,SAAAC,GACLb,EAAgB,SAAD,OAAUrC,EAAKK,QAAf,sCACf8C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,UAI1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcX,QAAS4B,IAEvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QAAmDA,EAAU,YAAc,QAE7E,4BAvDFO,EAAYO,KAAI,SAAAhD,GAAI,OAAI,kBAAC,EAAD,CAAMoD,IAAKpD,EAAKmB,GAAInB,KAAMA,EAAMC,iBAAkB,kBAAM0C,EAAmB3C,EAAKmB,WAwDtG,0BAAMkC,SAhDM,SAAAC,GAEdA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS2B,EACTZ,MAAM,IAAIqC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGrBtB,EAAmBiB,GAAYnC,MAAK,SAAAE,GAElCQ,EAASD,EAAMN,OAAOD,IAEtBU,EAAW,SAmCT,2BAAO6B,MAAO9B,EAAS+B,SAtDJ,SAAAT,GACvBrB,EAAWqB,EAAMU,OAAOF,UAsDpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,Q,MC/ENC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.27a58133.chunk.js","sourcesContent":["import React from 'react';\n\n// 項目(データ一つずつ)の共通コンポーネント\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react';\n\n// エラーメッセージ共通コンポーネント\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React from 'react';\n\n// フッター共通コンポーネント\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/notes';\n\n// 取得\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  };\n  return request.then(response => response.data.concat(nonExisting));\n};\n\n// 新規作成\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\n// 更新\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // useEffect(サーバからgetの際に使う)\n  useEffect(() => {\n    // サーバーに保存してあるデータをGET\n    noteService.getAll().then(initialNotes => setNotes(initialNotes));\n  }, []);\n\n  // showAllがtrueかfalseでコンポーネントの表示を変更\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  // 一つ一つのデータの表示をshowAllのtrueとfalseで表示を管理(変更)\n  const rows = () =>\n    notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />);\n\n  // newNoteのsubmit時に必要\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  // db.jsonに登録してある同じデータをPOST\n  const addNote = event => {\n    // デフォルトイベントtrue\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then(data => {\n      // 新しい配列で作成\n      setNotes(notes.concat(data));\n      // Post後formは空にする\n      setNewNote('');\n    });\n  };\n\n  // データの更新\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      // エラーメッセージ\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>show {showAll ? 'important' : 'all'}</button>\n      </div>\n      <ul>{rows()}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}